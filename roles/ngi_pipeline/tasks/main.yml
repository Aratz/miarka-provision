---

- name: "Check if {{ NGI_venv_name }} virtual env exists"
  shell: "conda env list | awk '{print $1}' | egrep -e ^{{ NGI_venv_name }}$"
  register: "py2_venv_exists"
  ignore_errors: true

- name: Setup virtual env and install dependencies
  shell: "conda create -n {{ NGI_venv_name }} pip python=2.7"
  when: "not py2_venv_exists.stdout"

- name: "Check if {{ NGI_venv_py3_name }} virtual env exists"
  shell: "conda env list | awk '{print $1}' | egrep -e ^{{ NGI_venv_py3_name }}$"
  register: "py3_venv_exists"
  ignore_errors: true

- name: Setup virtual env with python3 and install dependencies
  shell: "conda create -n {{ NGI_venv_py3_name }} -c anaconda python=3.8"
  when: "not py3_venv_exists.stdout"

- name: Fetch ngi_pipeline from github
  git: repo={{ ngi_pipeline_repo }}
       dest={{ ngi_pipeline_dest }}
       version={{ ngi_pipeline_version }}
       force=yes

- name: (Temporary until everything is updated) Install click7.0 as click7.1 breaks everything
  pip:
    name: click
    version: "7.0"
    virtualenv: "{{ ngi_pipeline_venv }}"

- name: Install ngi_pipeline requirements
  pip:
    requirements: "{{ ngi_pipeline_dest }}/requirements.txt"
    virtualenv: "{{ ngi_pipeline_venv }}"

- name: Install ngi_pipeline
  pip:
    name: "file:{{ ngi_pipeline_dest }}"
    virtualenv: "{{ ngi_pipeline_venv }}"

- name: Create ngi_pipeline conf directory
  file: path="{{ ngi_pipeline_conf }}" state=directory mode=g+s

- name: Install PyVCF for joint calling
  pip:
    name: "PyVCF"
    virtualenv: "{{ ngi_pipeline_venv }}"

- name: Create ngi_resources folder
  file: name="{{ ngi_resources }}" state=directory mode=g+s

- name: Create ngi_resources/piper folder
  file: name="{{ ngi_resources }}/piper" state=directory mode=g+s

- name: Create deployed tools version file
  copy:
    dest: "{{ deployed_tool_versions }}"
    content: "-- {{ deployment_environment }} ({{ deployment_version }}) --"

- name: Deploy GATK license key
  copy: src="files/{{ gatk_key }}" dest="{{ ngi_resources }}/piper/{{ gatk_key }}"
  ignore_errors: true

- name: Deploy fastqc conf for irma
  template: src="fastq_screen.irma.conf.j2" dest="{{ ngi_pipeline_conf }}"

- name: Deploy script for creating site specific ngi_pipeline dirs for logs and db
  template: src=create_ngi_pipeline_dirs.sh.j2 dest={{ ngi_resources }}/create_ngi_pipeline_dirs.sh

- name: Deploy common bash environment variables
  template: src="{{ bash_env_script }}.j2" dest="{{ ngi_pipeline_conf }}/{{ bash_env_script }}"

- name: Add anaconda path to sourceme script
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PATH={{ anaconda_path }}/bin:$PATH'
              backup=no

# Run site-specific tasks for Uppsala
- import_tasks: site_tasks.yml
  vars:
    site: "upps"
    ngi_pipeline_db: "{{ ngi_pipeline_db_upps }}"
    ngi_pipeline_slurm_project: "{{ ngi_pipeline_upps_delivery }}"
    ngi_pipeline_sequencing_center: "NGI-U"
    ngi_pipeline_log: "{{ ngi_pipeline_log_upps }}"
    recipient_mail: "{{ recipient_mail_upps }}"
    site_config: "{{ upps_config }}"
    charon_api_token: "{{ charon_api_token_upps }}"
    tsm_config_file: "{{ tsm_config_file_upps }}"
    ngi_pipeline_delivery: "{{ ngi_pipeline_upps_delivery }}"
    bash_env_script: "{{ bash_env_upps_script }}"

# Run site-specific tasks for Sthlm
- import_tasks: site_tasks.yml
  vars:
    site: "sthlm"
    ngi_pipeline_db: "{{ ngi_pipeline_db_sthlm }}"
    ngi_pipeline_slurm_project: "{{ ngi_pipeline_sthlm_delivery }}"
    ngi_pipeline_sequencing_center: "NGI-S"
    ngi_pipeline_log: "{{ ngi_pipeline_log_sthlm }}"
    recipient_mail: "{{ recipient_mail_sthlm }}"
    site_config: "{{ sthlm_config }}"
    charon_api_token: "{{ charon_api_token_sthlm }}"
    tsm_config_file: "{{ tsm_config_file_sthlm }}"
    ngi_pipeline_delivery: "{{ ngi_pipeline_sthlm_delivery }}"
    bash_env_script: "{{ bash_env_sthlm_script }}"

- name: Try getting anaconda version
  shell: "conda --version"
  register: conda_version
  ignore_errors: true

- name: Store anaconda version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "Anaconda: {{ conda_version.stderr }}"
  when: conda_version.stderr #for some reason saved as stderr

- name: Store ngi_pipeline version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "NGI Pipeline: {{ ngi_pipeline_version }}"
