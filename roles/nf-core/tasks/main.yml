---
- name: "Check if {{ nf_core_env_name }} virtual env exists"
  shell: "conda env list"
  register: "nfcore_envs"

- name: Setup {{ nf_core_env_name }} virtual env with python3, nextflow v{{ nextflow_version_tag }} and nf-core v{{ nf_core_version }}
  command: "conda create -n {{ nf_core_env_name }} -c conda-forge -c bioconda -c anaconda python=3.7 nextflow={{ nextflow_version_tag }} nf-core={{ nf_core_version }}"
  when: not nf_core_env_name in nfcore_envs.stdout|split

- name: Create temp directories for singularity images
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ nf_core_vars.SINGULARITY_CACHEDIR }}"
    - "{{ nf_core_vars.SINGULARITY_TMPDIR }}"

- name: nf-core
  command: "nf-core -v download {{ item.name }} --compress none -c none --outdir {{ sw_path }}{{ item.name }} -r {{ item.release }}"
  environment: "{{ nf_core_vars }}"
  args:
    chdir: "{{ sw_path }}"
    creates: "{{ sw_path }}{{ item.name }}"
  with_items: "{{ pipelines }}"

- name: Create directories for singularity images
  file:
    path: "{{ ngi_containers }}/{{ item.name }}"
    state: directory
    mode: 02775 #ug=rwx, o=rx, g+s
  with_items: "{{ pipelines }}"

- name: Pull Singularity images if version has been updated
  command: "singularity pull --name nf-core-{{ item.name }}-{{ item.release }}.simg docker://nfcore/{{ item.name }}:{{ item.release }}"
  environment: "{{ nf_core_vars }}"
  args:
    chdir: "{{ ngi_containers }}/{{ item.name }}"
    creates: "{{ ngi_containers }}/{{ item.name }}/nf-core-{{ item.name }}-{{ item.release }}.simg" #creates skips action if file already exists
  ignore_errors: true
  with_items: "{{ pipelines }}"

- name: Remove singularity cache directories
  file: name="{{ item }}" state=absent
  with_items:
    - "{{ nf_core_vars.SINGULARITY_CACHEDIR }}"
    - "{{ nf_core_vars.SINGULARITY_TMPDIR }}"

- name: Create nf-core config
  template:
    src: "site.config.j2"
    dest: "{{ ngi_pipeline_conf }}/{{ item.0.name }}_{{ item.1.site }}.config"
  with_nested:
    - "{{ pipelines }}"
    - [ { site: "sthlm", project_id: "{{ ngi_pipeline_sthlm_delivery }}" }, { site: "upps", project_id: "{{ ngi_pipeline_upps_delivery }}" }]

- name: Set alias for pipeline
  lineinfile:
    dest: "{{ ngi_pipeline_conf }}/{{ item.1.script }}"
    line: >
          alias {{ item.0.name }}='nextflow run {{ sw_path }}{{ item.0.name }}/workflow/ \
          -profile uppmax \
          -c {{ ngi_pipeline_conf }}/nextflow_irma_{{ item.1.site }}.config \
          -c {{ ngi_pipeline_conf }}/{{ item.0.name }}_{{ item.1.site }}.config'
    backup: no
  with_nested:
    - "{{ pipelines }}"
    - [ { site: "sthlm", script: "{{ bash_env_sthlm_script }}" }, { site: "upps", script: "{{ bash_env_upps_script }}" } ]

- name: Download SILVA classifier data for ampliseq
  get_url:
    url: https://www.arb-silva.de/fileadmin/silva_databases/qiime/Silva_132_release.zip
    dest: "{{ ngi_containers }}/ampliseq/Silva_132_release.zip"
  args:
    creates: "{{ ngi_containers }}/ampliseq/Silva_132_release.zip"
  when: item.name == "ampliseq"
  with_items:
    - "{{ pipelines }}"

- name: Store tool version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "{{ item.name }}: {{ item.release }}"
  with_items:
    - "{{ pipelines }}"
